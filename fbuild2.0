// fbuild - Gerenciador de programas source-based para LFS (versão corrigida e ampliada)
// Linguagem: C++17
// Compilação: g++ -std=c++17 -O2 -pthread -o fbuild main.cpp
// Dependências em runtime: bash, git, curl, tar, unzip, xz, 7z, patch, zstd, sha256sum
//
// O que esta versão faz:
//  - CLI com atalhos (install/in, build/bi, remove/rm, download/dl, patch, unpack, search, info, sync, new, upgrade, list/ls, clean)
//  - Flags globais: --no-color, --quiet/-q, --force/-f, --jobs/-j N
//  - Download de fontes via curl (HTTP/HTTPS) e git clone (URLs .git ou git:// / git@)
//  - Extração automática de .tar.*, .zip; fallback via 7z; tudo direto no diretório de trabalho
//  - Patches via HTTP/HTTPS (curl), repositório git (aplica *.patch do repo) ou diretório local com *.patch
//  - Verificação SHA256 opcional (sha256N correspondente ao sourceN)
//  - Resolução de dependências recursiva com ordenação topológica (ignora as já instaladas, a menos que --force)
//  - Manifesto de arquivos e diretórios; remove apenas o que foi instalado
//  - Hooks opcionais ($REPO/hooks/*.sh) para etapas (pre/post-download/patch/build/install/remove)
//  - Logs, spinner e cores (desativáveis)
//
// Observações de segurança: ainda usa system()/bash -lc por simplicidade + escaping básico.
// Para endurecer, trocar por execve/spawn e pipelines controlados no futuro.

#include <bits/stdc++.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <filesystem>

using namespace std;
namespace fs = std::filesystem;

// ========================= Cores / UI =========================
namespace ansi {
    const string reset="\033[0m";
    const string bold="\033[1m";
    const string dim="\033[2m";
    const string red="\033[31m";
    const string green="\033[32m";
    const string yellow="\033[33m";
    const string blue="\033[34m";
    const string magenta="\033[35m";
    const string cyan="\033[36m";
    const string gray="\033[90m";
}

static bool g_verbose = true;
static bool g_no_color = false;
static bool g_quiet = false;
static bool g_force = false;
static int  g_jobs = 0; // 0 = auto (hardware_concurrency)

// Wrapper de cor (desliga se --no-color/NO_COLOR)
string C(const string &color){ return g_no_color? string("") : color; }

// Escape muito simples para shell (melhor que nada)
string shellEscape(const string &s){
    string out; out.reserve(s.size()*2);
    for(unsigned char c: s){
        if(isalnum(c) || c=='/'||c=='_'||c=='.'||c=='-'||c=='+'||c=='=') out.push_back(c);
        else { out.push_back('\\'); out.push_back(c); }
    }
    return out;
}

// Execução de comandos (com ou sem redirecionamento de log)
int sh(const string &cmd, const string &logfile=""){
    if(g_verbose && !g_quiet) cerr << C(ansi::gray) << "→ " << cmd << C(ansi::reset) << "\n";
    if(!logfile.empty()){
        string real = "bash -lc '" + cmd + "'"; // permite pipes/redirs internos
        real += " >>" + shellEscape(logfile) + " 2>&1";
        return system(real.c_str());
    }
    return system(cmd.c_str());
}

bool existsPath(const string &p){ return access(p.c_str(), F_OK)==0; }
string getenvs(const string &k, const string &def=""){ const char* v=getenv(k.c_str()); return v? string(v):def; }
string joinPath(const string &a, const string &b){ if(a.empty()) return b; if(a.back()=='/') return a+b; return a+"/"+b; }
string timestamp(){ time_t t=time(nullptr); char buf[64]; strftime(buf,64,"%Y-%m-%d_%H-%M-%S",localtime(&t)); return buf; }
void ensureDir(const string &p){ if(!existsPath(p)) { fs::create_directories(p); } }

// Verifica se binário está disponível no PATH
bool haveCmd(const string &cmd){ string c = "bash -lc 'command -v "+shellEscape(cmd)+" >/dev/null'"; return system(c.c_str())==0; }
void requireCmds(const vector<string>&cmds){
    vector<string> missing;
    for(auto &c:cmds){ if(!haveCmd(c)) missing.push_back(c); }
    if(!missing.empty()){
        cerr<<C(ansi::red)<<"Faltam dependências no PATH: ";
        for(size_t i=0;i<missing.size();++i){ cerr<<missing[i]<<(i+1<missing.size()?", ":""); }
        cerr<<C(ansi::reset)<<"\n"; exit(2);
    }
}

// ========================= Spinner =========================
class Spinner {
    atomic<bool> running{false};
    thread th; string msg;
public:
    void start(const string &m){ msg=m; running=true; th=thread([&]{
        const char* frames="|/-\\"; int i=0;
        while(running){ if(!g_quiet){ cerr << "\r" << C(ansi::cyan) << frames[i++%4] << C(ansi::reset) << " " << msg << "   "; cerr.flush(); } this_thread::sleep_for(chrono::milliseconds(90)); }
        if(!g_quiet){ cerr << "\r" << string(msg.size()+8,' ') << "\r"; cerr.flush(); }
    }); }
    void stopOk(){ running=false; if(th.joinable()) th.join(); if(!g_quiet) cerr << C(ansi::green) << "✔" << C(ansi::reset) << " " << msg << "\n"; }
    void stopFail(){ running=false; if(th.joinable()) th.join(); if(!g_quiet) cerr << C(ansi::red) << "✖" << C(ansi::reset) << " " << msg << "\n"; }
};

// ========================= Config & paths =========================
struct Config{
    string REPO = getenvs("REPO", string(getenvs("HOME"))+"/fbuild-repo");
    string CACHE = getenvs("FB_CACHE", string(getenvs("HOME"))+"/.cache/fbuild");
    string WORK = getenvs("FB_WORK", string(getenvs("HOME"))+"/.local/share/fbuild/work");
    string PKG = getenvs("FB_PKG", string(getenvs("HOME"))+"/.local/share/fbuild/pkg");
    string DB = getenvs("FB_DB", string(getenvs("HOME"))+"/.local/share/fbuild/db");
    string LOG = getenvs("FB_LOG", string(getenvs("HOME"))+"/.local/share/fbuild/log");
    string DESTDIR = getenvs("DESTDIR", "/"); // raiz alvo
} cfg;

void ensureBaseDirs(){
    for(auto &d: {cfg.REPO, cfg.CACHE, cfg.WORK, cfg.PKG, cfg.DB, cfg.LOG}) ensureDir(d);
    for(auto &sub: {string("base"),string("x11"),string("extras"),string("desktop"),string("hooks")}) ensureDir(joinPath(cfg.REPO, sub));
}

// ========================= Formato de receita =========================
struct Recipe{
    string path; // caminho do .fbuild
    map<string,string> kv;
    vector<string> sources;  // sourceN=
    vector<string> sha256;   // sha256N=
    vector<string> patches;  // patchN=
    vector<string> depends;  // depends= a b c
};

string trim(const string &s){ size_t a=s.find_first_not_of(" \t\r\n"); if(a==string::npos) return ""; size_t b=s.find_last_not_of(" \t\r\n"); return s.substr(a,b-a+1);}    

Recipe loadRecipe(const string &file){
    ifstream in(file); if(!in) { cerr<<C(ansi::red)<<"Erro abrindo receita: "<<file<<C(ansi::reset)<<"\n"; exit(1);}    
    Recipe r; r.path=file; string line; 
    while(getline(in,line)){
        line=trim(line); if(line.empty()||line[0]=='#'||line[0]=='[') continue;
        auto eq=line.find('='); if(eq==string::npos) continue; string k=trim(line.substr(0,eq)); string v=trim(line.substr(eq+1));
        if(k.rfind("source",0)==0){ r.sources.push_back(v); }
        else if(k.rfind("sha256",0)==0){ r.sha256.push_back(v); }
        else if(k.rfind("patch",0)==0){ r.patches.push_back(v); }
        else if(k=="depends"){ stringstream ss(v); string x; while(ss>>x) r.depends.push_back(x); }
        else r.kv[k]=v;
    }
    return r;
}

string recipeName(const Recipe &r){ auto it=r.kv.find("name"); return it==r.kv.end()?"":it->second; }
string recipeVersion(const Recipe &r){ auto it=r.kv.find("version"); return it==r.kv.end()?"":it->second; }
string workDir(const Recipe &r){ return joinPath(cfg.WORK, recipeName(r)+"-"+recipeVersion(r)); }
string buildDir(const Recipe &r){ string bd = r.kv.count("build_dir")? r.kv.at("build_dir"): string("."); return joinPath(workDir(r), bd); }
string pkgTar(const Recipe &r){ return joinPath(cfg.PKG, recipeName(r)+"-"+recipeVersion(r)+".tar.zst"); }
string dbDir(const Recipe &r){ return joinPath(cfg.DB, recipeName(r)); }
string manifestFilesPath(const Recipe &r){ return joinPath(dbDir(r), "manifest.files"); }
string manifestDirsPath(const Recipe &r){ return joinPath(dbDir(r), "manifest.dirs"); }
bool isInstalled(const string &name){ return existsPath(joinPath(cfg.DB, name)); }

string getInstalledVersion(const string &name){
    string meta = joinPath(joinPath(cfg.DB, name), "meta");
    ifstream f(meta); if(!f) return "";
    string line;
    while(getline(f,line)){
        if(line.rfind("version=",0)==0) return trim(line.substr(8));
    }
    return "";
}

// ========================= Download / Extração / SHA =========================
static inline bool isGitUrl(const string &url){
    if(url.rfind("git://",0)==0) return true;
    if(url.rfind("git@",0)==0) return true;
    if((url.rfind("https://",0)==0 || url.rfind("http://",0)==0) && url.find(".git")!=string::npos) return true;
    if(url.size()>=4 && url.substr(url.size()-4)==".git") return true;
    return false;
}

int fetchOne(const string &url, const string &out){
    if(isGitUrl(url)){
        return sh("git clone --depth 1 "+shellEscape(url)+" "+shellEscape(out));
    } else {
        return sh("curl -L --fail --retry 3 -o "+shellEscape(out)+" "+shellEscape(url));
    }
}

int extract(const string &archive, const string &dest){
    string a=archive; 
    // formatos comuns
    if(a.size()>=4 && a.substr(a.size()-4)==".zip") return sh("unzip -q "+shellEscape(a)+" -d "+shellEscape(dest));
    if(a.find(".tar.")!=string::npos || a.size()>=4 && (a.substr(a.size()-4)==".tgz" || a.substr(a.size()-4)==".tbz" || a.substr(a.size()-4)==".txz")){
        return sh("tar -xf "+shellEscape(a)+" -C "+shellEscape(dest));
    }
    if(a.size()>=3 && (a.substr(a.size()-3)==".xz" || a.substr(a.size()-3)==".gz" || a.substr(a.size()-3)==".bz2" )) {
        // alguns projetos publicam como <name>.tar.xz etc; tar detecta
        return sh("tar -xf "+shellEscape(a)+" -C "+shellEscape(dest));
    }
    // fallback 7z cobre .7z, .zst, etc (depende do 7z instalado)
    return sh("7z x "+shellEscape(a)+" -o"+shellEscape(dest));
}

bool verifySha256(const string &file, const string &expected){
    if(expected.empty()) return true; // nada a verificar
    string cmd = "bash -lc 'sha256sum " + shellEscape(file) + " | awk \"{print $1}\"'";
    FILE* pipe=popen(cmd.c_str(), "r"); if(!pipe) return false; char buf[256]; string got;
    if(fgets(buf,sizeof(buf),pipe)) got = trim(string(buf));
    pclose(pipe);
    if(got.empty()) return false;
    if(got!=expected){
        cerr<<C(ansi::red)<<"SHA256 divergente: esperado="<<expected<<" obtido="<<got<<C(ansi::reset)<<"\n";
        return false;
    }
    return true;
}

int downloadSources(const Recipe &r, string &outDir){
    // Limpa workdir anterior
    if(existsPath(workDir(r))) sh("rm -rf "+shellEscape(workDir(r)));
    ensureDir(workDir(r));

    // Para cada sourceN
    for(size_t i=0;i<r.sources.size();++i){
        string url=r.sources[i];
        // alvo de cache: um arquivo (se http) ou um diretório (se git)
        string cacheTarget = joinPath(cfg.CACHE, recipeName(r)+"-"+recipeVersion(r)+"-src"+to_string(i));
        if(isGitUrl(url)){
            string dest = joinPath(workDir(r), string("src")+to_string(i)); ensureDir(dest);
            int rc = sh("git clone --depth 1 "+shellEscape(url)+" "+shellEscape(dest)); if(rc!=0) return rc;
        } else {
            // baixar arquivo para cache
            int rc = fetchOne(url, cacheTarget); if(rc!=0) return rc;
            string expected = (i<r.sha256.size()? r.sha256[i]: string(""));
            if(!verifySha256(cacheTarget, expected)) return 100; // código específico para checksum
            // extrair direto no workdir
            rc = extract(cacheTarget, workDir(r)); if(rc!=0) return rc;
        }
    }
    outDir = workDir(r);
    return 0;
}

// ========================= Aplicação de patches =========================
int applyPatchFile(const string &patchPath, const string &dest){
    return sh("patch -p1 -d "+shellEscape(dest)+" < "+shellEscape(patchPath));
}

int applyPatches(const Recipe &r){
    string wd = workDir(r);

    auto applyDirPatches = [&](const string &dir)->int{
        string cmd = "bash -lc 'shopt -s nullglob; for f in " + shellEscape(dir) + "/*.patch; do patch -p1 -d " + shellEscape(wd) + " < \"$f\"; done'";
        return sh(cmd);
    };

    for(auto &p : r.patches){
        string path=p;
        if(p.rfind("http://",0)==0 || p.rfind("https://",0)==0){
            string tmp = joinPath(cfg.CACHE, string("patch-")+to_string(hash<string>{}(p)));
            if(fetchOne(p,tmp)!=0) return 1;
            if(applyPatchFile(tmp, wd)!=0) return 1;
        } else if(isGitUrl(p)){
            string tmpdir = joinPath(cfg.CACHE, string("patchrepo-")+to_string(hash<string>{}(p)));
            if(existsPath(tmpdir)) sh("rm -rf "+shellEscape(tmpdir));
            ensureDir(tmpdir);
            if(sh("git clone --depth 1 "+shellEscape(p)+" "+shellEscape(tmpdir))!=0) return 1;
            if(applyDirPatches(tmpdir)!=0) return 1;
        } else if(fs::is_directory(p)){
            if(applyDirPatches(p)!=0) return 1;
        } else {
            if(applyPatchFile(path, wd)!=0) return 1;
        }
    }
    // patches locais do diretório da receita (./patches/*.patch)
    string pdir = joinPath(fs::path(r.path).parent_path().string(), "patches");
    if(existsPath(pdir)){
        if(applyDirPatches(pdir)!=0) return 1;
    }
    return 0;
}

// ========================= Hooks =========================
void runHook(const string &hook, const Recipe &r){
    string script = joinPath(joinPath(cfg.REPO, "hooks"), hook+".sh");
    if(existsPath(script)) {
        string cmd = "bash -lc '"+shellEscape(script)+" "+shellEscape(recipeName(r))+" "+shellEscape(recipeVersion(r))+"'";
        sh(cmd);
    }
}

// ========================= Build & Install =========================
int runBuildSystem(const Recipe &r){
    string bs = r.kv.count("build_system")? r.kv.at("build_system"):"autotools";
    string dir = buildDir(r);
    int jobs = g_jobs>0 ? g_jobs : (int)max(1u, thread::hardware_concurrency());

    if(r.kv.count("pre_build")){
        if(sh("bash -lc 'cd "+shellEscape(dir)+" && "+r.kv.at("pre_build")+"'" ) != 0) return 1;
    }
    if(r.kv.count("build")){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && "+r.kv.at("build")+"' ");
    }
    if(bs=="autotools"){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && ./configure --prefix=/usr "+(r.kv.count("build_opts")?r.kv.at("build_opts"):string(""))+" && make -j"+to_string(jobs)+"' ");
    } else if(bs=="cmake"){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr "+(r.kv.count("build_opts")?r.kv.at("build_opts"):string(""))+" && cmake --build build -j"+to_string(jobs)+"' ");
    } else if(bs=="meson"){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && meson setup build --prefix=/usr "+(r.kv.count("build_opts")?r.kv.at("build_opts"):string(""))+" && meson compile -C build -j "+to_string(jobs)+"' ");
    }
    return 1;
}

int runInstall(const Recipe &r, const string &destdir){
    string bs = r.kv.count("build_system")? r.kv.at("build_system"):"autotools";
    string dir = buildDir(r);
    if(r.kv.count("install")){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && DESTDIR="+shellEscape(destdir)+" "+r.kv.at("install")+"' ");
    }
    if(bs=="autotools"){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && make DESTDIR="+shellEscape(destdir)+" install' ");
    } else if(bs=="cmake"){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && cmake --install build --prefix /usr --config Release --verbose' ");
    } else if(bs=="meson"){
        return sh("bash -lc 'cd "+shellEscape(dir)+" && meson install -C build' ");
    }
    return 1;
}

// ========================= DB & Logs =========================
void dbRegister(const Recipe &r){
    string d=dbDir(r); ensureDir(d);
    ofstream meta(joinPath(d, "meta"));
    meta << "name="<<recipeName(r)<<"\n";
    meta << "version="<<recipeVersion(r)<<"\n";
    meta << "install_time="<<timestamp()<<"\n";
}

void dbUnregister(const string &name){
    string d=joinPath(cfg.DB, name);
    if(existsPath(d)) sh("rm -rf "+shellEscape(d));
}

string actionLog(const string &name,const string &action){ return joinPath(cfg.LOG, name+"-"+action+"-"+timestamp()+".log"); }

// ========================= Empacotamento & manifesto =========================
int makePkgFromDest(const Recipe &r, const string &destdir){
    string pkg = pkgTar(r);
    string cmd = "bash -lc 'cd "+shellEscape(destdir)+" && tar -I zstd -cf "+shellEscape(pkg)+" .'";
    return sh(cmd);
}

int writeManifestFromDest(const Recipe &r, const string &destdir){
    string d = dbDir(r); ensureDir(d);
    // Arquivos
    {
        ofstream mf(manifestFilesPath(r)); if(!mf) return 1;
        string cmd = "bash -lc 'cd "+shellEscape(destdir)+" && find . -type f -o -type l | sed \"s#^\\./##\" | sort'";
        FILE* pipe=popen(cmd.c_str(), "r"); if(!pipe) return 1; char buf[4096];
        while(fgets(buf,sizeof(buf),pipe)){
            string rel=string(buf); rel.erase(remove(rel.begin(), rel.end(),'\n'), rel.end()); if(rel.empty()) continue; 
            mf << joinPath(cfg.DESTDIR, rel) << "\n"; 
        }
        pclose(pipe);
    }
    // Diretórios (para remoção posterior, do mais profundo ao mais raso)
    {
        ofstream md(manifestDirsPath(r)); if(!md) return 1;
        string cmd = "bash -lc 'cd "+shellEscape(destdir)+" && find . -type d | sed \"s#^\\./##\" | sort -r'";
        FILE* pipe=popen(cmd.c_str(), "r"); if(!pipe) return 1; char buf[4096];
        vector<string> dirs;
        while(fgets(buf,sizeof(buf),pipe)){
            string rel=string(buf); rel.erase(remove(rel.begin(), rel.end(),'\n'), rel.end()); if(rel==".") continue; 
            dirs.push_back(joinPath(cfg.DESTDIR, rel));
        }
        pclose(pipe);
        for(auto &d: dirs) md<<d<<"\n";
    }
    return 0;
}

int installPkgToRoot(const Recipe &r, const string &pkg){
    string root = cfg.DESTDIR;
    return sh("tar -I zstd -xf "+shellEscape(pkg)+" -C "+shellEscape(root));
}

// ========================= Busca/Receitas =========================
vector<string> findAllRecipeFiles(){
    vector<string> found; 
    for(const string &cat: {"base","x11","extras","desktop"}){
        string cdir = joinPath(cfg.REPO, cat);
        string cmd = "bash -lc 'shopt -s globstar nullglob; for f in " + shellEscape(cdir) + "/**/*.fbuild; do echo \"$f\"; done'";
        FILE* pipe=popen(cmd.c_str(), "r"); if(!pipe) continue; char buf[4096];
        while(fgets(buf,sizeof(buf),pipe)){ string p=trim(buf); if(!p.empty()) found.push_back(p); }
        pclose(pipe);
    }
    return found;
}

vector<string> findRecipesByNameFragment(const string &query){
    vector<string> found; 
    for(const auto &p: findAllRecipeFiles()){
        string base=fs::path(p).filename().string();
        if(query.empty() || base.find(query)!=string::npos) found.push_back(p);
    }
    return found;
}

// Localiza uma receita cujo campo "name=" corresponda exatamente
string findRecipeByPkgName(const string &pkgname){
    for(const auto &p: findAllRecipeFiles()){
        Recipe r = loadRecipe(p);
        if(recipeName(r)==pkgname) return p;
    }
    return "";
}

// ========================= Resolução de dependências =========================
// Gera plano ordenado (topológico) de instalação; pula já instalados (a menos que --force).
vector<Recipe> resolveInstallPlan(const Recipe &root){
    // DFS com detecção de ciclo simples
    unordered_map<string,int> mark; // 0=novo,1=visiting,2=done
    vector<Recipe> order;
    function<void(const Recipe&)> dfs = [&](const Recipe &r){
        string n = recipeName(r);
        if(mark[n]==1){ cerr<<C(ansi::red)<<"Ciclo de dependências detectado em "<<n<<C(ansi::reset)<<"\n"; exit(3); }
        if(mark[n]==2) return;
        mark[n]=1;
        for(const auto &dep : r.depends){
            if(!g_force && isInstalled(dep)) continue; // já instalado: pula
            string depfile = findRecipeByPkgName(dep);
            if(depfile.empty()){
                cerr<<C(ansi::red)<<"Dependência não encontrada no REPO: "<<dep<<C(ansi::reset)<<"\n"; exit(4);
            }
            Recipe rd = loadRecipe(depfile);
            dfs(rd);
        }
        mark[n]=2;
        // Se não for --force e já instalado com mesma versão, não precisa reinstalar
        if(!g_force && isInstalled(n)){
            string iv = getInstalledVersion(n);
            if(!iv.empty() && iv==recipeVersion(r)) return;
        }
        order.push_back(r);
    };
    dfs(root);
    return order; // na ordem de build (deps primeiro)
}

// ========================= Ações =========================
int action_sync(const vector<string>&){
    if(!existsPath(joinPath(cfg.REPO, ".git"))){
        cerr<<C(ansi::yellow)<<"Aviso: REPO não é um repositório git. Pulando."<<C(ansi::reset)<<"\n";
        return 0;
    }
    Spinner sp; sp.start("Sincronizando repositório");
    int rc = sh("git -C "+shellEscape(cfg.REPO)+" pull --ff-only");
    if(rc==0) sp.stopOk(); else sp.stopFail();
    return rc;
}

int action_new(const vector<string>&args){
    if(args.size()<2){ cerr<<"Uso: fbuild new <categoria> <nome> <versão>\n"; return 1; }
    string cat=args[0]; string name=args[1]; string ver=args.size()>=3?args[2]:"1.0";
    string dir = joinPath(joinPath(cfg.REPO, cat), name+"-"+ver);
    ensureDir(dir);
    string file = joinPath(dir, name+"-"+ver+".fbuild");
    ofstream f(file);
    f << "# Exemplo de receita fbuild\n";
    f << "name="<<name<<"\nversion="<<ver<<"\nsummary=\nlicense=\nhomepage=\n";
    f << "source0=\n# sha2560=\n# patch0=\n";
    f << "build_system=autotools\n# build_opts=\n# pre_build=\n# build=\n# install=\n# build_dir=.\n# depends=\n";
    cout<<file<<" criado.\n";
    return 0;
}

int action_search(const vector<string>&args){
    string q = args.size()? args[0]: string("");
    for(auto &p: findRecipesByNameFragment(q)) cout<<p<<"\n";
    return 0;
}

int action_info(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild info <arquivo .fbuild>\n"; return 1; }
    Recipe r=loadRecipe(args[0]);
    cout<<C(ansi::bold)<<recipeName(r)<<" "<<recipeVersion(r)<<C(ansi::reset)<<"\n";
    for(auto &kv: r.kv) cout<<kv.first<<"="<<kv.second<<"\n";
    for(size_t i=0;i<r.sources.size();++i) cout<<"source"<<i<<"="<<r.sources[i]<<"\n";
    for(size_t i=0;i<r.patches.size();++i) cout<<"patch"<<i<<"="<<r.patches[i]<<"\n";
    for(size_t i=0;i<r.sha256.size();++i) cout<<"sha256"<<i<<"="<<r.sha256[i]<<"\n";
    return 0;
}

int action_download(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild download <.fbuild>\n"; return 1; }
    requireCmds({"bash","git","curl","tar","unzip","7z"});
    Recipe r=loadRecipe(args[0]);
    runHook("pre-download", r);
    string out; int rc=downloadSources(r,out);
    runHook("post-download", r);
    return rc;
}

int action_unpack(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild unpack <.fbuild>\n"; return 1; }
    requireCmds({"bash","git","curl","tar","unzip","7z","patch"});
    Recipe r=loadRecipe(args[0]);
    runHook("pre-download", r); string out; if(downloadSources(r,out)!=0) return 1; runHook("post-download", r);
    runHook("pre-patch", r); int rc=applyPatches(r); runHook("post-patch", r);
    return rc;
}

int action_patch(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild patch <.fbuild>\n"; return 1; }
    requireCmds({"bash","patch","git","curl"});
    Recipe r=loadRecipe(args[0]);
    runHook("pre-patch", r);
    int rc=applyPatches(r);
    runHook("post-patch", r);
    return rc;
}

int action_build(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild build <.fbuild>\n"; return 1; }
    requireCmds({"bash","git","curl","tar","unzip","7z","patch","make","cmake","meson"}); // alguns podem ser opcionais conforme recipe
    Recipe r=loadRecipe(args[0]);

    // Baixar + aplicar patches
    runHook("pre-download", r); string out; if(downloadSources(r,out)!=0) return 1; runHook("post-download", r);
    runHook("pre-patch", r); if(applyPatches(r)!=0) return 1; runHook("post-patch", r);

    // Build
    Spinner sp; sp.start("Compilando "+recipeName(r));
    runHook("pre-build", r);
    int rc=runBuildSystem(r);
    if(rc==0){ sp.stopOk(); runHook("post-build", r); }
    else { sp.stopFail(); }
    return rc;
}

int action_install_single(const Recipe &r){
    requireCmds({"bash","git","curl","tar","unzip","7z","patch","sha256sum","zstd"});

    // Logs
    string log = actionLog(recipeName(r), "install");

    // Download + patches
    runHook("pre-download", r); string out; if(downloadSources(r,out)!=0) { cerr<<"download falhou\n"; return 1; } runHook("post-download", r);
    runHook("pre-patch", r); if(applyPatches(r)!=0) { cerr<<"patch falhou\n"; return 1; } runHook("post-patch", r);

    // Build
    runHook("pre-build", r);
    Spinner spb; spb.start("Compilando "+recipeName(r));
    if(runBuildSystem(r)!=0) { spb.stopFail(); cerr<<"build falhou\n"; return 1; }
    spb.stopOk(); runHook("post-build", r);

    // DESTDIR
    string tmpdest = joinPath(cfg.WORK, string("dest-")+recipeName(r)+"-"+recipeVersion(r));
    if(existsPath(tmpdest)) sh("rm -rf "+shellEscape(tmpdest)); ensureDir(tmpdest);

    runHook("pre-install", r);
    Spinner spi; spi.start("Instalando (DESTDIR) "+recipeName(r));
    if(runInstall(r, tmpdest)!=0) { spi.stopFail(); cerr<<"install (fase em DESTDIR) falhou\n"; sh("rm -rf "+shellEscape(tmpdest)); return 1; }
    spi.stopOk();

    // Manifesto + pacote + instalação final
    if(writeManifestFromDest(r, tmpdest)!=0) cerr<<C(ansi::yellow)<<"Aviso: não foi possível gerar manifesto"<<C(ansi::reset)<<"\n";
    if(makePkgFromDest(r, tmpdest)!=0) { cerr<<"empacotamento falhou\n"; return 1; }

    Spinner spx; spx.start("Instalando no root");
    if(installPkgToRoot(r, pkgTar(r))!=0) { spx.stopFail(); cerr<<"instalação no root falhou\n"; return 1; }
    spx.stopOk();
    runHook("post-install", r);

    dbRegister(r);
    cout<<C(ansi::green)<<"Instalado: "<<recipeName(r)<<"-"<<recipeVersion(r)<<C(ansi::reset)<<"\n";
    // limpeza de temporários
    sh("rm -rf "+shellEscape(tmpdest));
    return 0;
}

// Instala um pacote com resolução de dependências (ordem topológica)
int action_install(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild install <.fbuild>\n"; return 1; }
    Recipe root = loadRecipe(args[0]);

    // Se já instalado e sem --force e mesma versão, nada a fazer
    if(!g_force && isInstalled(recipeName(root)) && getInstalledVersion(recipeName(root))==recipeVersion(root)){
        cout<<C(ansi::yellow)<<"Já instalado: "<<recipeName(root)<<" "<<recipeVersion(root)<<C(ansi::reset)<<"\n";
        return 0;
    }

    auto plan = resolveInstallPlan(root);
    for(const auto &r: plan){
        // última verificação (caso outro dep já tenha instalado)
        if(!g_force && isInstalled(recipeName(r)) && getInstalledVersion(recipeName(r))==recipeVersion(r)){
            cout<<C(ansi::yellow)<<"(skip) Já instalado: "<<recipeName(r)<<" "<<recipeVersion(r)<<C(ansi::reset)<<"\n";
            continue;
        }
        int rc = action_install_single(r);
        if(rc!=0) return rc;
    }
    return 0;
}

int action_remove(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild remove <nome>\n"; return 1; }
    string name=args[0];

    // Recupera versão do DB para hooks
    Recipe dummy; dummy.kv["name"]=name; dummy.kv["version"]=getInstalledVersion(name);
    if(dummy.kv["version"].empty()) dummy.kv["version"]="unknown";

    if(!isInstalled(name)){
        cerr<<C(ansi::yellow)<<"Pacote não instalado: "<<name<<C(ansi::reset)<<"\n";
        return 0;
    }

    // FUTURO: verificação de revdeps (não implementado aqui)
    runHook("pre-remove", dummy);

    string d=joinPath(cfg.DB,name);
    string mfpath = joinPath(d,"manifest.files");
    string mdpath = joinPath(d,"manifest.dirs");

    // Remoção de arquivos listados
    ifstream mf(mfpath);
    if(mf){
        vector<string> files; string path;
        while(getline(mf,path)){ path=trim(path); if(!path.empty())) files.push_back(path); }
        // Remove arquivos primeiro (e links), do fim p/ início por segurança
        for(auto it=files.rbegin(); it!=files.rend(); ++it){
            string cmd = "bash -lc 'if [ -e " + shellEscape(*it) + " ] || [ -L " + shellEscape(*it) + " ]; then rm -f " + shellEscape(*it) + "; fi'";
            sh(cmd);
        }
    } else {
        cerr<<C(ansi::yellow)<<"Aviso: manifest.files ausente; não é possível remover arquivos"<<C(ansi::reset)<<"\n";
    }

    // Remoção de diretórios *apenas* os listados (profundo → raso) e se vazios
    ifstream md(mdpath);
    if(md){
        vector<string> dirs; string path; while(getline(md,path)){ path=trim(path); if(!path.empty()) dirs.push_back(path); }
        for(auto &dir: dirs){
            string cmd = "bash -lc 'if [ -d " + shellEscape(dir) + " ] && [ -z \"$(ls -A " + shellEscape(dir) + ")\" ]; then rmdir " + shellEscape(dir) + "; fi'";
            sh(cmd);
        }
    } else {
        cerr<<C(ansi::yellow)<<"Aviso: manifest.dirs ausente; diretórios não foram removidos"<<C(ansi::reset)<<"\n";
    }

    dbUnregister(name);
    runHook("post-remove", dummy);
    cout<<C(ansi::yellow)<<"Removido (arquivos/diretórios listados): "<<name<<C(ansi::reset)<<"\n";
    return 0;
}

int action_upgrade(const vector<string>&args){
    if(args.empty()){ cerr<<"Uso: fbuild upgrade <nova_receita.fbuild>\n"; return 1; }
    // upgrade = mesma lógica do install (resolve deps + reinstala)
    return action_install(args);
}

int action_clean(const vector<string>&){
    sh("rm -rf "+shellEscape(cfg.WORK));
    ensureDir(cfg.WORK);
    cout<<"WORK limpo.\n";
    return 0;
}

int action_revdep(const vector<string>&){ cout<<"revdep: análise simplificada ainda não implementada.\n"; return 0; }
int action_orphans(const vector<string>&){ cout<<"orphans: análise simplificada ainda não implementada.\n"; return 0; }

// Lista pacotes instalados
int action_list(const vector<string>&){
    if(!existsPath(cfg.DB)){ cout<<"(nenhum pacote instalado)\n"; return 0; }
    for(auto &entry : fs::directory_iterator(cfg.DB)){
        if(!entry.is_directory()) continue;
        string name = entry.path().filename().string();
        string ver = getInstalledVersion(name);
        cout<<name<<(ver.empty()?"":" " + ver)<<"\n";
    }
    return 0;
}

// ========================= Ajuda =========================
void help(){
    cout<<"fbuild - gerenciador source-based (endurecido)\n\n";
    cout<<"Variáveis (export): REPO, FB_CACHE, FB_WORK, FB_PKG, FB_DB, FB_LOG, DESTDIR\n\n";
    cout<<"Flags globais: --no-color  --quiet|-q  --force|-f  --jobs|-j N\n\n";
    cout<<"Comandos:\n";
    cout<<"  init-repo                         # cria estrutura $REPO/{base,x11,extras,desktop}\n";
    cout<<"  new <categoria> <nome> <ver>      # cria pasta e receita .fbuild\n";
    cout<<"  sync                              # git pull no REPO\n";
    cout<<"  search [termo]                    # procura receitas por nome de arquivo\n";
    cout<<"  info <arquivo.fbuild>             # mostra metadados\n";
    cout<<"  download|dl <arquivo.fbuild>      # baixa fontes (com SHA256 opcional) e extrai\n";
    cout<<"  unpack <arquivo.fbuild>           # baixa + extrai + aplica patches\n";
    cout<<"  patch <arquivo.fbuild>            # aplica patches (supõe fonte extraído)\n";
    cout<<"  build|bi <arquivo.fbuild>         # compila sem instalar\n";
    cout<<"  install|in <arquivo.fbuild>       # resolve deps, empacota e instala\n";
    cout<<"  remove|rm <nome>                  # remove via manifest.files/.dirs\n";
    cout<<"  upgrade <nova_receita.fbuild>     # instala versão maior (resolve deps)\n";
    cout<<"  list|ls                           # lista pacotes instalados (DB)\n";
    cout<<"  revdep                            # stub\n";
    cout<<"  orphans                           # stub\n";
    cout<<"  clean                             # limpa WORK\n";
    cout<<"  help                              # esta ajuda\n\n";
}

// ========================= main =========================
int main(int argc, char **argv){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    // Parse rápido de flags globais antes do comando
    vector<string> argsv;
    for(int i=1;i<argc;i++) argsv.push_back(argv[i]);
    vector<string> positional;
    for(size_t i=0;i<argsv.size();++i){
        string a=argsv[i];
        if(a=="--no-color" || getenv("NO_COLOR")) g_no_color=true;
        else if(a=="--quiet" || a=="-q") g_quiet=true;
        else if(a=="--force" || a=="-f") g_force=true;
        else if((a=="--jobs" || a=="-j") && i+1<argsv.size()){
            g_jobs = stoi(argsv[++i]);
        } else {
            positional.push_back(a);
        }
    }

    ensureBaseDirs();

    if(positional.empty()){ help(); return 0; }
    string cmd = positional[0];
    vector<string> args; for(size_t i=1;i<positional.size();++i) args.push_back(positional[i]);

    if(cmd=="help"||cmd=="-h"||cmd=="--help") { help(); return 0; }
    if(cmd=="init-repo") return action_init_repo(args);
    if(cmd=="sync") return action_sync(args);
    if(cmd=="new") return action_new(args);
    if(cmd=="search") return action_search(args);
    if(cmd=="info") return action_info(args);
    if(cmd=="download"||cmd=="dl") return action_download(args);
    if(cmd=="unpack") return action_unpack(args);
    if(cmd=="patch") return action_patch(args);
    if(cmd=="build"||cmd=="bi") return action_build(args);
    if(cmd=="install"||cmd=="in") return action_install(args);
    if(cmd=="remove"||cmd=="rm") return action_remove(args);
    if(cmd=="upgrade") return action_upgrade(args);
    if(cmd=="clean") return action_clean(args);
    if(cmd=="revdep") return action_revdep(args);
    if(cmd=="orphans") return action_orphans(args);
    if(cmd=="list"||cmd=="ls") return action_list(args);

    cerr<<C(ansi::red)<<"Comando desconhecido: "<<cmd<<C(ansi::reset)<<"\n";
    help();
    return 1;
}

// ========================= Exemplo de receita =========================
/*
Salve como:
$REPO/base/htop-3.3.0/htop-3.3.0.fbuild

Conteúdo mínimo:

name=htop
version=3.3.0
summary=Interactive process viewer
license=GPL-2.0
homepage=https://htop.dev/
# Fonte de release (HTTP) com SHA256
source0=https://github.com/htop-dev/htop/archive/refs/tags/3.3.0.tar.gz
sha2560=<INSIRA_SHA256_CORRETO>
# Ex.: patch único HTTP
# patch0=https://exemplo.com/fix.patch
# Ou repositório git com patches (*.patch na raiz):
# patch1=https://github.com/alguem/serie-de-patches.git
build_system=autotools
build_opts=
# build_dir=.
# depends=ncurses

Dicas:
- Para usar git como fonte principal: source0=https://github.com/htop-dev/htop.git
- Para projetos que extraem para subdir, defina build_dir=<nome-da-pasta> ou ajuste patches.
*/
